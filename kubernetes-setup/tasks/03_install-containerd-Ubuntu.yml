---
  ###
  ###
  # SETUP CONTAINERD: https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd
  ###
  ###
  - name: Remove any older /etc/modules-load.d/k8s.conf
    ansible.builtin.file:
      path: /etc/modules-load.d/k8s.conf
      state: absent

  - name: Let iptables see bridged traffic (1)
    ansible.builtin.blockinfile:
      path: /etc/modules-load.d/k8s.conf
      create: true
      block: |
        overlay
        br_netfilter
      owner: root
      group: root
      mode: '644'

  - name: Add the overlay module
    community.general.modprobe:
      name: overlay
      state: present

  - name: Add the br_netfilter module
    community.general.modprobe:
      name: br_netfilter
      state: present

  - name: Get whether the br_netfilter, overlay modules are loaded
    ansible.builtin.shell: "lsmod | egrep -w 'overlay|br_netfilter'"
    args:
      executable: /bin/bash
    register: kernel_modules

  - name: Display whether the br_netfilter, overlay modules are loaded
    ansible.builtin.debug: msg="{{ kernel_modules.stdout_lines }}"

  - name: Remove any older /etc/sysctl.d/k8s.conf
    ansible.builtin.file:
      path: /etc/sysctl.d/k8s.conf
      state: absent

  - name: Let iptables see bridged traffic for IPv4 (2)
    ansible.builtin.blockinfile:
      path: /etc/sysctl.d/k8s.conf
      create: true
      block: |
        net.bridge.bridge-nf-call-iptables  = 1
      owner: root
      group: root
      mode: '644'
    when: ipv6_enabled | bool == false

  - name: Let iptables see bridged traffic for IPv6 (2)
    ansible.builtin.blockinfile:
      path: /etc/sysctl.d/k8s.conf
      create: true
      block: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
      owner: root
      group: root
      mode: '644'
    when: ipv6_enabled | bool == false

  - name: Ensure IP Forwarding is enabled
    ansible.builtin.lineinfile:
      path: /etc/sysctl.conf
      regexp: '^net.ipv4.ip_forward'
      line: net.ipv4.ip_forward = 1
      state: present

  - name: Apply sysctl params
    ansible.builtin.command: "sysctl --system"


  - name: Install ca-certificates and curl
    ansible.builtin.apt:
      name:
      - ca-certificates
      - curl
      state: latest
      update_cache: yes
      autoclean: yes

  - name: Create and set permission for /etc/apt/keyrings
    ansible.builtin.file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Add Dockerâ€™s official GPG key
    ansible.builtin.get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /etc/apt/keyrings/docker.asc
      owner: root
      group: root
      mode: '644'

  - name: Get DEB architecture
    ansible.builtin.command: dpkg --print-architecture
    register: deb_architecture

  - name: Add Docker's stable Repository
    ansible.builtin.apt_repository:
      repo: "deb [arch={{ deb_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      filename: "docker"
      state: present
      update_cache: true

  - name: Install containerd.io package 
    ansible.builtin.apt:
      name:
      - containerd.io
      state: latest
      update_cache: yes
      autoclean: yes

  - name: Create default containerd configuration
    ansible.builtin.shell: containerd config default | tee /etc/containerd/config.toml
    args:
      executable: /bin/bash

  - name: Using the systemd cgroup driver
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      regexp: "SystemdCgroup.*"
      line: "            SystemdCgroup = true"
      state: present

  - name: Restart containerd
    ansible.builtin.systemd_service:
      state: restarted
      name: containerd
      enabled: true

  - name: Get containerd version
    ansible.builtin.command: containerd -v
    register: containerd_version

  - name: Display containerd version
    ansible.builtin.debug: msg="{{ containerd_version.stdout }}"